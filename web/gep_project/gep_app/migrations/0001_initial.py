# Generated by Django 2.0 on 2018-09-09 11:19

from django.conf import settings
import django.contrib.auth.models
import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(max_length=10, primary_key=True, serialize=False)),
                ('password', models.CharField(blank=True, max_length=100, null=True)),
                ('role', models.CharField(choices=[('S', 'Student'), ('F', 'Faculty'), ('A', 'Sac'), ('D', 'Department')], max_length=1)),
                ('email', models.EmailField(max_length=100)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='COT_Allotment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('course_id', models.CharField(max_length=10, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200, unique=True)),
                ('credits', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('pre_requisites', models.TextField(blank=True, max_length=500, null=True)),
                ('cot_requisite', models.BooleanField(default=False)),
                ('cgpa_cutoff', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('mode_of_allotment', models.CharField(choices=[('FCFS', 'First Come First Served'), ('CGPA', 'Current CGPA')], max_length=4)),
            ],
        ),
        migrations.CreateModel(
            name='Elective',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slot', models.CharField(choices=[('A', 'Slot A'), ('B', 'Slot B'), ('C', 'Slot C'), ('D', 'Slot D'), ('E', 'Slot E'), ('F', 'Slot F'), ('G', 'Slot G'), ('H', 'Slot H'), ('P', 'Slot P'), ('Q', 'Slot Q'), ('R', 'Slot R'), ('S', 'Slot S'), ('T', 'Slot T')], max_length=1)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gep_app.Course')),
            ],
        ),
        migrations.CreateModel(
            name='Elective_Allotment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('elective', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gep_app.Elective')),
            ],
        ),
        migrations.CreateModel(
            name='Elective_Preference',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('priority_rank', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('elective', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gep_app.Elective')),
            ],
        ),
        migrations.CreateModel(
            name='Elective_Seats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('max_seats', models.IntegerField()),
                ('elective', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gep_app.Elective')),
            ],
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Faculty',
            fields=[
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('name', models.CharField(max_length=100)),
                ('dept', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gep_app.Department')),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('name', models.CharField(max_length=100)),
                ('date_of_birth', models.DateField()),
                ('current_CGPA', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('next_semester', models.IntegerField(blank=True, choices=[(1, 'Semester I'), (2, 'Semester II'), (3, 'Semester III'), (4, 'Semester IV'), (5, 'Semester V'), (6, 'Semester VI'), (7, 'Semester VII'), (8, 'Semester VIII'), (9, 'Semester IX'), (10, 'Semester X')], null=True)),
                ('core_slots', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('A', 'Slot A'), ('B', 'Slot B'), ('C', 'Slot C'), ('D', 'Slot D'), ('E', 'Slot E'), ('F', 'Slot F'), ('G', 'Slot G'), ('H', 'Slot H'), ('P', 'Slot P'), ('Q', 'Slot Q'), ('R', 'Slot R'), ('S', 'Slot S'), ('T', 'Slot T')], max_length=1), blank=True, null=True, size=None)),
                ('required_elective_count', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('submission_datetime', models.DateTimeField(blank=True, null=True)),
                ('FA', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='gep_app.Faculty')),
                ('dept', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gep_app.Department')),
                ('past_courses', models.ManyToManyField(blank=True, to='gep_app.Course')),
            ],
        ),
        migrations.AddField(
            model_name='cot_allotment',
            name='elective',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gep_app.Elective'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AddField(
            model_name='elective_seats',
            name='dept',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gep_app.Department'),
        ),
        migrations.AddField(
            model_name='elective_preference',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gep_app.Student'),
        ),
        migrations.AddField(
            model_name='elective_allotment',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gep_app.Student'),
        ),
        migrations.AddField(
            model_name='elective',
            name='faculty',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='gep_app.Faculty'),
        ),
        migrations.AddField(
            model_name='course',
            name='dept',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gep_app.Department'),
        ),
        migrations.AddField(
            model_name='cot_allotment',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gep_app.Student'),
        ),
        migrations.AlterUniqueTogether(
            name='elective_seats',
            unique_together={('elective', 'dept')},
        ),
        migrations.AlterUniqueTogether(
            name='elective_preference',
            unique_together={('student', 'elective')},
        ),
        migrations.AlterUniqueTogether(
            name='elective_allotment',
            unique_together={('student', 'elective')},
        ),
        migrations.AlterUniqueTogether(
            name='elective',
            unique_together={('course', 'slot')},
        ),
        migrations.AlterUniqueTogether(
            name='cot_allotment',
            unique_together={('student', 'elective')},
        ),
    ]
